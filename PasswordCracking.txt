EJ Cervantes
9 NOV 2018
Lab: Password Challenges

Extra Credit: Look at screenshot attached. Code snipet included below.
root@kali:/vagrant/src/JohnTheRipper/run# ./john studenthash.hashes 
Using default input encoding: UTF-8
Loaded 1 password hash (PKZIP [32/64])
Warning: OpenMP is disabled; a non-OpenMP build may be faster
Press 'q' or Ctrl-C to abort, almost any other key for status
0g 0:00:05:33  3/3 0g/s 7487Kp/s 7487Kc/s 7487KC/s aldfgoa2..aldfgff8
0g 0:00:08:24  3/3 0g/s 7557Kp/s 7557Kc/s 7557KC/s tagd2426..tagd246d
0g 0:00:16:28  3/3 0g/s 7379Kp/s 7379Kc/s 7379KC/s s0muy76..s0muyll
0g 0:00:17:32  3/3 0g/s 7363Kp/s 7363Kc/s 7363KC/s beymzbony..beymzbod7
hercules         (student-3.zip)
1g 0:00:49:46 DONE 3/3 (2018-11-09 17:43) 0.000334g/s 7590Kp/s 7590Kc/s 7590KC/s hercus7x..hercull2
Use the "--show" option to display all of the cracked passwords reliably
Session completed
root@kali:/vagrant/src/JohnTheRipper/run# ./john studenthash.hashes --show
student-3.zip:hercules:::::/vagrant/src/JohnTheRipper/run/student-3.zip

1 password hash cracked, 0 left


pass1-3
Password:
States

finding test eax, eax I found out this sets the zero flag if they are equal
With a JNZ next the value had to be set do zero and that is how the password is compared.
Seeing earlier we used the mov instruction to move the contents of "text" to register eax.
dd eaz, 1Ch tells what byte to start at and push onto stack for the next 6 bytes

pass2-3
Password:
setatS

I found this by first trying to find what was being compared between the stack and what activated the zero flag. 
Then found out text or the DI was put onto the stack but was only a pointer to a certain number of bytes in the string. 1Ch - 28 is how many bytes down from the first byte of the text where the password starts and goes on for another 6 bytes.


pass3-3

This password is 2 words long with no space in the middle. The first word is States as found in the previous exercises. The second comparision 
is 178 bytes from beginning and following 6 bytes after that. For me this landed on fare,_ For some reason the password is still incorrect so I am not to sure what I missed
. In the first test, it is testing the register against itself to make sure it is not empty, if it is empty
the password will be denied.

After class on Tuesday it was brought to my attention that theres was a compiler error when my passwords were being generated.
My 2 worded password lands in the middle of a space which is not acceptable for a password according to the C function used.
Therefore there is no legal password made so all passwords will be rejected.

pass4-3

Password: olivia
I found this password by realizing that the function before strcmp was comparing 2 different arrays of chars.
This comparison was an xor of their hexadecimals which led me to find the word of olivia.


pass5-3

This password adds a certain char or amount of chars from random strings stored in the memory 

